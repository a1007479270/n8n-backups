{
  "createdAt": "2025-07-02T20:13:29.722Z",
  "updatedAt": "2025-07-02T20:45:49.000Z",
  "id": "UwgZ3e7Z3gBsKSRY",
  "name": "cs‰∫∫Â∑•Êô∫ËÉΩËÇ°Â∏ÇÊëòË¶ÅÊú∫Âô®‰∫∫",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"symbols\": \"AAPL,MSFT,NVDA,TSLA,AMZN,GOOGL,META,JPM,XOM,UNH,GME\"\n}\n",
        "options": {}
      },
      "id": "4e8eca4b-2e21-4dd1-821e-cd162c2b9891",
      "name": "Ticker List",
      "type": "n8n-nodes-base.set",
      "position": [
        1380,
        280
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "url": "=https://data.alpaca.markets/v2/stocks/bars",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpCustomAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "symbols",
              "value": "={{ $json.symbols }}"
            },
            {
              "name": "timeframe",
              "value": "1Day"
            },
            {
              "name": "limit",
              "value": "1000"
            },
            {
              "name": "feed",
              "value": "iex"
            },
            {
              "name": "=start",
              "value": "={{ new Date(Date.now() - 100 * 24 * 60 * 60 * 1000).toISOString().split('T')[0] }}"
            },
            {
              "name": "end",
              "value": "={{ new Date().toISOString().split('T')[0] }}"
            }
          ]
        },
        "options": {}
      },
      "id": "1ba69b0d-9392-4376-9d45-869fb24bbfe8",
      "name": "Fetch Stock Data",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1600,
        280
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "import pandas as pd\nimport numpy as np\nimport json\n\nbars_by_symbol = items[0]['json']['bars']\nstocks = []\n\nfor symbol, bars in bars_by_symbol.items():\n    closes = [bar['c'] for bar in bars if 'c' in bar]\n    if len(closes) < 30:\n        continue\n\n    df = pd.DataFrame({'close': closes})\n\n    # RSI(14)\n    delta = df['close'].diff()\n    gain = delta.clip(lower=0)\n    loss = -delta.clip(upper=0)\n    avg_gain = gain.rolling(14).mean()\n    avg_loss = loss.rolling(14).mean()\n    rs = avg_gain / avg_loss\n    df['rsi'] = 100 - (100 / (1 + rs))\n\n    # MACD (12,26,9)\n    ema12 = df['close'].ewm(span=12, adjust=False).mean()\n    ema26 = df['close'].ewm(span=26, adjust=False).mean()\n    df['macd'] = ema12 - ema26\n    df['signal'] = df['macd'].ewm(span=9, adjust=False).mean()\n\n    latest = df.iloc[-1]\n    rsi = latest['rsi']\n    macd = latest['macd']\n    signal = latest['signal']\n\n    status = \"Hold\"\n    if rsi < 30 and macd > signal:\n        status = \"Buy\"\n    elif rsi > 70 and macd < signal:\n        status = \"Sell\"\n\n    stocks.append({\n        \"ticker\": symbol,\n        \"rsi\": round(float(rsi), 2),\n        \"macd\": round(float(macd), 2),\n        \"signal\": round(float(signal), 2),\n        \"status\": status\n    })\n\nreturn [{\n    \"json\": {\n        \"summary\": json.dumps({\n            \"stocks\": stocks\n        }, separators=(',', ':')),\n      \"stocks\": stocks\n    }\n}]\n"
      },
      "id": "cf3c61f8-8cd7-4762-be66-49015eb70705",
      "name": "Interpret Data",
      "type": "n8n-nodes-base.code",
      "position": [
        1820,
        280
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "resource": "assistant",
        "assistantId": {
          "mode": "list",
          "value": "REDACTED_ASSISTANT_ID",
          "cachedResultName": "REDACTED_ASSISTANT"
        },
        "prompt": "define",
        "text": "=Here is the technical indicator data as JSON:\n\n{{ $json.summary }}\n\nPulled as of {{ $now }}",
        "options": {}
      },
      "id": "204a576b-0107-41c8-94ef-bbb43f399eae",
      "name": "Stock Analysis Assistant",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "position": [
        2020,
        280
      ],
      "typeVersion": 1.8
    },
    {
      "parameters": {
        "select": "user",
        "user": {
          "mode": "list",
          "value": "REDACTED_USER_ID",
          "cachedResultName": "REDACTED_USER"
        },
        "text": "={{ $json.output }}",
        "otherOptions": {}
      },
      "id": "a309d59d-d335-4cd2-9ab9-627deb0e8f51",
      "name": "Send Summary to User(s)",
      "type": "n8n-nodes-base.slack",
      "position": [
        2400,
        280
      ],
      "webhookId": "57e1eff1-81c1-42f1-b8ee-fb3e40551362",
      "typeVersion": 2.3
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 30 6-14 * * 1-5"
            }
          ]
        }
      },
      "id": "199fb5be-2878-4656-b437-e8eb67abf93d",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        700,
        280
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "acca2d72-d9db-436d-aee8-81a3a359fe85",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              },
              "leftValue": "={{ $json.is_open }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "c70a7e6b-a016-4c23-8f87-19993f641d6c",
      "name": "Check if Market is open",
      "type": "n8n-nodes-base.if",
      "position": [
        1140,
        280
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {},
      "id": "3c18c0e9-c2e9-4834-a99d-b526e603e413",
      "name": "Market is Closed",
      "type": "n8n-nodes-base.noOp",
      "position": [
        1380,
        480
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "url": "https://paper-api.alpaca.markets/v2/clock",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpCustomAuth",
        "options": {}
      },
      "id": "4054d3ad-9d4a-48a4-922f-423b53faf5e6",
      "name": "Check Market Status",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        940,
        280
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "content": "# üß† Stock Analysis Assistant\n\nThis workflow analyzes selected S&P 500 stocks using RSI and MACD indicators, summarizes the insights into plain English, and posts an update to Slack every hour during U.S. market hours (Mon‚ÄìFri).",
        "width": 660
      },
      "id": "ca883036-edd6-4434-9e9d-f1ae49a837b8",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -60,
        -80
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## üìÖ Schedule Trigger\n\n**Node:** `Schedule Trigger`  \nRuns every hour between 6:30 AM and 2:30 PM (PST), Monday to Friday.  \n**Cron Expression:** `0 30 6-14 * * 1-5`\n\n‚è∞ Triggers analysis only during U.S. stock market hours.",
        "height": 700,
        "color": 7
      },
      "id": "296f302a-6937-480e-b50a-f9722957103f",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        620,
        -80
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## üèõÔ∏è Market Status Check\n\n**Node:** `Check Market Status`  \nEndpoint: `https://paper-api.alpaca.markets/v2/clock`\n\nChecks if the market is open using Alpaca‚Äôs `/clock` endpoint.\n\n**Node:** `Check if Market is open`  \n- ‚úÖ If true ‚Üí continue  \n- ‚ùå If false ‚Üí exit gracefully via the ‚ÄúMarket is Closed‚Äù NoOp node",
        "height": 700,
        "width": 460,
        "color": 7
      },
      "id": "2a91e0e7-2bb7-4f5e-ada6-f33418f62242",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        860,
        -80
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## üìà Ticker Setup\n\n**Node:** `Ticker List`  \nSets the stock symbols to be analyzed.\n\nüìå You can update this list to monitor different stocks.",
        "height": 540,
        "width": 220,
        "color": 4
      },
      "id": "1ac9be29-ba85-45f3-b301-0e5743bd26b7",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1320,
        -80
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## üîó Fetch Stock Data\n\n**Node:** `Fetch Stock Data`  \nCalls Alpaca‚Äôs `/v2/stocks/bars` endpoint with:\n- `symbols`: from `Ticker List`\n- `timeframe`: `1Day`\n- `limit`: `1000`\n- `feed`: `iex` (avoid SIP permission error)\n- `start`: 100 days ago\n- `end`: today",
        "height": 540,
        "width": 220,
        "color": 4
      },
      "id": "09da138a-5946-4f10-8665-4dd6eaf7304b",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1540,
        -80
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## üßÆ Interpret Data\n\n**Node:** `Interpret Data`  \nPython code calculates:\n- RSI(14)\n- MACD(12,26,9)\n- Decision status: `\"Buy\"`, `\"Hold\"`, or `\"Sell\"`\n\nOutputs:\n- `stocks`: a list of indicator values and status\n- `summary`: JSON string version for GPT",
        "height": 540,
        "width": 220,
        "color": 4
      },
      "id": "bb43f220-c2cf-44dd-ad55-d93e793414f0",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1760,
        -80
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## ü§ñ AI Assistant Summary\n\n**Node:** `Stock Analysis Assistant`  \nUses a custom OpenAI assistant to:\n- Group stocks into categories\n- Provide commentary in plain English\n- Teach users simple market behaviors\n\nPrompt includes:\n- Stock JSON (`summary`)\n- Timestamp (`$now`)\n\nüìå Uses Slack-friendly markdown output.",
        "height": 540,
        "width": 360,
        "color": 4
      },
      "id": "0a43f870-e952-403e-95b8-d899adfc2ff0",
      "name": "Sticky Note6",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1980,
        -80
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "",
        "width": 220,
        "color": 3
      },
      "id": "b836451f-9a37-4e42-98b7-b9f3c442128d",
      "name": "Sticky Note7",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1320,
        460
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "3e6f26d5-7f71-4bd7-8009-27f25610cc6c",
      "name": "End of Flow",
      "type": "n8n-nodes-base.noOp",
      "position": [
        2620,
        280
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## üí¨ Post to Slack\n\n**Node:** `Send Summary to User(s)`  \nSends the GPT-generated summary to Slack using:\n```js\n{{ $json.output }}\n```\n‚öôÔ∏è Configured with the appropriate Slack user or channel.",
        "height": 540,
        "width": 220,
        "color": 4
      },
      "id": "ae25a15d-8b0d-4190-84dc-4fe184b9c05b",
      "name": "Sticky Note8",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2340,
        -80
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "",
        "height": 540,
        "width": 220,
        "color": 4
      },
      "id": "7fa4e58d-c299-42cf-b654-7ab7070fa85f",
      "name": "Sticky Note9",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2560,
        -80
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## ü§ñ AI Assistant Prompt\n\nYou are a financial assistant writing a quick, readable market update for a general audience. Your job is to help people understand how well-known stocks are behaving ‚Äî even if they aren‚Äôt professional traders.\n\nYou‚Äôll be given:\n\nA list of stocks with technical indicators (e.g., momentum data)\nA timestamp (in RFC 3339 or ISO format) for when the data was pulled.\nüìå Your task:\nGroup the stocks into three categories:\nüü¢ Buy Watchlist ‚Äì Stocks showing signs of recovery or upward momentum\n‚ö™ Neutral Hold ‚Äì Stocks with steady or unclear direction\nüî¥ Caution / Sell ‚Äì Stocks that appear overbought or may pull back\nFor each stock:\nWrite a short, plain-language insight about what‚Äôs happening\nUse familiar terms like ‚Äúgaining steam,‚Äù ‚Äúcooling off,‚Äù or ‚Äúshowing hesitation‚Äù\nAvoid technical jargon like RSI or MACD unless context makes it helpful\nAdd a helpful tip or comment for each stock (e.g.,\n‚ÄúThis pattern often signals hesitation‚Äù or\n‚ÄúThis dip might attract bargain hunters‚Äù)\nFinish with a summary line using the timestamp like this:\nSummary as of October 2, 2025 ‚Äì Most stocks were stable with one or two worth watching.\nüì¶ Respond in Slack Markdown Only:\nExample Format:\n\n*üìä Market Summary (as of October 2, 2025)*\n\nüü¢ *Buy Watchlist*  \n‚Ä¢ TSLA ‚Äì Recovering after a dip; gaining steam. This type of rebound often attracts early buyers.\n\n‚ö™ *Neutral Hold*  \n‚Ä¢ AAPL ‚Äì Holding steady. This often means the market is waiting on new developments.  \n‚Ä¢ GOOGL ‚Äì Moving sideways. A sign of consolidation before potential breakout.  \n‚Ä¢ MSFT ‚Äì Little movement. Could be digesting prior gains.  \n‚Ä¢ NVDA ‚Äì Slight back-and-forth. May indicate indecision in the market.\n\nüî¥ *Caution / Sell*  \n‚Ä¢ None at this time.\n\n_Summary as of October 2, 2025: Most stocks appear steady. TSLA could be one to watch if momentum holds._\nüö´ Do NOT:\nReturn raw JSON\nUse code blocks unless formatting Slack markdown (no YAML or tags)\nUse technical finance language unless simplified",
        "height": 940,
        "width": 660,
        "color": 5
      },
      "id": "35acbe9f-48a2-4a70-9c66-c0d22b7b38c9",
      "name": "Sticky Note10",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -60,
        100
      ],
      "typeVersion": 1
    }
  ],
  "connections": {
    "Ticker List": {
      "main": [
        [
          {
            "node": "Fetch Stock Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Interpret Data": {
      "main": [
        [
          {
            "node": "Stock Analysis Assistant",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Stock Data": {
      "main": [
        [
          {
            "node": "Interpret Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Check Market Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Market Status": {
      "main": [
        [
          {
            "node": "Check if Market is open",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if Market is open": {
      "main": [
        [
          {
            "node": "Ticker List",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Market is Closed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Summary to User(s)": {
      "main": [
        [
          {
            "node": "End of Flow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Stock Analysis Assistant": {
      "main": [
        [
          {
            "node": "Send Summary to User(s)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {},
  "versionId": "dc0fc176-8828-4a64-a21c-710b070dc527",
  "triggerCount": 0,
  "tags": []
}